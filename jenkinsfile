pipeline {
    agent { label 'dev' }

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['DEV01', 'DEV02'], description: 'Environment')
        booleanParam(name: 'CONFIRM', defaultValue: false, description: 'Confirm that you want to deploy')
        extendedChoice(bindings: 'image=haproxy', defaultValue: '', description: 'Build', groovyClasspath: '', groovyScript: '''import groovy.json.JsonSlurper; def image = binding.variables.get(\'image\'); def result = "http://10.15.16.101:9443/v2/${image}/tags/list".toURL().text; def jsonSlurper = new JsonSlurper(); def object = jsonSlurper.parseText(result); return object.tags.reverse()''', multiSelectDelimiter: ',', name: 'BUILD', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_SINGLE_SELECT', visibleItemCount: 5)
    }

    environment {
        S3_BUCKET = "s3://cmig-haproxy-deployment"
        CONSUL_URL = "https://consul.cmig.insurcloud.ca"
        FILES_DIR = "client/CMIG/cms/deploy/haproxy/DEV/files"
        CLIENT = "CMIG"
        HAPROXY_DIR = "/var/haproxy"
        NEXUS_URL = "nexus.cmig.insurcloud.ca"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    
    stages {
	
	stage('Set Environment') {
            steps {
                script {
				    if (${ENVIRONMENT} == 'DEV01') {
                       HOSTNAME = "internalhaproxy.${ENVIRONMENT}.${CLIENT}.insurcloud.ca"
                     } else if (${ENVIRONMENT} == 'DEV02' ) {
                   HOSTNAME = "internalhaproxy-${ENVIRONMENT}.nonprod.${CLIENT}.insurcloud.ca"
                   }
                   echo ${HOSTNAME}
                }
            }
        }


/*
        stage('Push S3 Files') {
            steps {
                dir(env.FILES_DIR) {
                    sh 'aws s3 cp ${ENVIRONMENT}/internal ${S3_BUCKET}/${ENVIRONMENT}/internal/config --recursive'
                }
            }
        }

        stage('Pull S3 Files') {
            steps {
                sh "ssh ec2-user@internalhaproxy.${ENVIRONMENT}.${CLIENT}.insurcloud.ca 'sudo mkdir -p ${HAPROXY_DIR}'"
                sh "ssh ec2-user@internalhaproxy.${ENVIRONMENT}.${CLIENT}.insurcloud.ca 'sudo aws s3 cp ${S3_BUCKET}/${ENVIRONMENT}/internal/ ${HAPROXY_DIR} --recursive && sudo chmod -R 755 ${HAPROXY_DIR}'"
            }
        }

        stage('Check for Confirmation') {
            steps {
                script {
                    if(!params.CONFIRM) {
                        currentBuild.result = 'Aborted'
                        error('Lacking Confirmation')
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                sh "ssh ec2-user@internalhaproxy.${ENVIRONMENT}.${CLIENT}.insurcloud.ca 'docker stop haproxy || true && \
                                                                                docker rm haproxy || true && \
                                                                                docker run -d \
                                                                                --restart=always \
                                                                                -e ENV=${ENVIRONMENT} \
                                                                                -e CLIENT=${CLIENT} \
                                                                                --name haproxy \
                                                                                --log-driver=awslogs \
                                                                                --log-opt awslogs-region=ca-central-1 \
                                                                                --log-opt awslogs-group=cmig-${ENVIRONMENT}-haproxy-internal \
                                                                                --log-opt awslogs-create-group=true \
                                                                                --log-opt awslogs-stream=internal-1 \
                                                                                -v ${HAPROXY_DIR}/ssl:/ssl:ro \
                                                                                -v ${HAPROXY_DIR}/config:/usr/local/etc/haproxy:ro \
                                                                                -p 80:8080 -p 443:8443 -p 8444:8444 -p 8404:8404 \
                                                                                ${NEXUS_URL}/haproxy:${BUILD}'"
            }
        }
		
*\	
    }}
